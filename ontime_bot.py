from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# Cr√©ez l'application avec votre cl√© Telegram
app = Application.builder().token("7685304448:AAEuMefo6gvKOydyTtRv6pVXLMxvTuJfWr4").build()

# Fonction utilitaire pour √©chapper les caract√®res sp√©ciaux pour MarkdownV2
def escape_markdown_v2(text):
    special_characters = r"_*[]()~`>#+-=|{}.!"
    for char in special_characters:
        text = text.replace(char, f"\\{char}")
    return text

# Dictionnaire des messages en plusieurs langues
LANGUAGES = {
    "en": {
        "start_message": (
            "Hello! I'm your sarcastic assistant bot.\n\n"
            "Here are the commands I understand:\n"
            "/start - Starts me, of course.\n"
            "/help - Shows this fabulous list of commands.\n"
            "/language - Change my language (English, French, Ukrainian).\n"
            "/add - Add something to your current session.\n"
            "/recap - Get a summary of your saved sessions.\n"
            "/save_session - Save the current session.\n\n"
            "What do you want now? ü§î"
        ),
        "help_message": "Here are the things I can do. It's not much, but it's honest work.",
        "add_success": "Fine, I've added that to your session.",
        "no_sessions": "You have no sessions saved. Do I look like a mind reader?",
        "recap_header": "Here‚Äôs your session recap:",
        "no_active_session": "There‚Äôs no active session to save. Are you lost?",
        "session_saved": "Your session has been saved. Finally."
    },
    "fr": {
        "start_message": (
            "Bonjour ! Je suis votre assistant sarcastique.\n\n"
            "Voici les commandes que je comprends :\n"
            "/start - Me d√©marrer, bien s√ªr.\n"
            "/help - Montre cette liste fabuleuse de commandes.\n"
            "/language - Change ma langue (Anglais, Fran√ßais, Ukrainien).\n"
            "/add - Ajouter quelque chose √† votre session actuelle.\n"
            "/recap - Obtenir un r√©sum√© de vos sessions enregistr√©es.\n"
            "/save_session - Enregistrer la session actuelle.\n\n"
            "Et maintenant, qu'est-ce que tu veux ? ü§î"
        ),
        "help_message": "Voici ce que je peux faire. Ce n'est pas beaucoup, mais c'est honn√™te.",
        "add_success": "Tr√®s bien, j'ai ajout√© √ßa √† votre session.",
        "no_sessions": "Vous n'avez aucune session enregistr√©e. Je ne lis pas dans les pens√©es.",
        "recap_header": "Voici un r√©sum√© de vos sessions :",
        "no_active_session": "Il n'y a pas de session active √† enregistrer. Vous √™tes perdu ?",
        "session_saved": "Votre session a √©t√© enregistr√©e. Enfin."
    },
    "uk": {
        "start_message": (
            "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –±–æ—Ç.\n\n"
            "–û—Å—å –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ —è —Ä–æ–∑—É–º—ñ—é:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–µ–Ω–µ, –∑–≤—ñ—Å–Ω–æ.\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
            "/language - –ó–º—ñ–Ω–∏—Ç–∏ –º–æ—é –º–æ–≤—É (–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞, –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞, –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞).\n"
            "/add - –î–æ–¥–∞—Ç–∏ —â–æ—Å—å –¥–æ –≤–∞—à–æ—ó –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó.\n"
            "/recap - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—é–º–µ –≤–∞—à–∏—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–µ—Å—ñ–π.\n"
            "/save_session - –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é.\n\n"
            "–Ü —â–æ —Ç–µ–ø–µ—Ä? ü§î"
        ),
        "help_message": "–û—Å—å —â–æ —è –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏. –ù–µ –±–∞–≥–∞—Ç–æ, –∞–ª–µ —á–µ—Å–Ω–æ.",
        "add_success": "–î–æ–±—Ä–µ, —è –¥–æ–¥–∞–≤ —Ü–µ –¥–æ –≤–∞—à–æ—ó —Å–µ—Å—ñ—ó.",
        "no_sessions": "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–µ—Å—ñ–π. –í–∏ –≤–æ—Ä–æ–∂–±–∏—Ç?",
        "recap_header": "–û—Å—å —Ä–µ–∑—é–º–µ –≤–∞—à–∏—Ö —Å–µ—Å—ñ–π:",
        "no_active_session": "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –í–∏ –∑–∞–≥—É–±–∏–ª–∏—Å—è?",
        "session_saved": "–í–∞—à—É —Å–µ—Å—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞—Ä–µ—à—Ç—ñ."
    },
}
# Fonction pour obtenir la langue d'un utilisateur
user_data = {}

def get_language(user_id):
    return user_data.get(user_id, {}).get("language", "en")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data[user_id] = {"language": "en"}
    lang = get_language(user_id)
    await update.message.reply_text(LANGUAGES[lang]["start_message"])

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_language(update.message.from_user.id)
    await update.message.reply_text(LANGUAGES[lang]["help_message"])

async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.split()

    if len(text) == 2 and text[1].lower() in LANGUAGES:
        user_data[user_id]["language"] = text[1].lower()
        await update.message.reply_text(f"Language switched to {text[1]}.")
    else:
        await update.message.reply_text("Please specify a valid language: en, fr, uk.")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message.text

    if user_id not in user_data:
        user_data[user_id] = {"sessions": [], "language": "en"}

    if "current_session" not in user_data[user_id]:
        user_data[user_id]["current_session"] = []

    user_data[user_id]["current_session"].append(message)
    lang = get_language(user_id)
    await update.message.reply_text(LANGUAGES[lang]["add_success"])

async def recap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = get_language(user_id)

    if user_id not in user_data or not user_data[user_id]["sessions"]:
        await update.message.reply_text(LANGUAGES[lang]["no_sessions"])
        return

    recap_message = LANGUAGES[lang]["recap_header"]
    for idx, session in enumerate(user_data[user_id]["sessions"], start=1):
        recap_message += f"\n{idx}. {', '.join(session)}"

    await update.message.reply_text(recap_message)

async def save_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = get_language(user_id)

    if user_id not in user_data or "current_session" not in user_data[user_id]:
        await update.message.reply_text(LANGUAGES[lang]["no_active_session"])
        return

    user_data[user_id]["sessions"].append(user_data[user_id]["current_session"])
    user_data[user_id].pop("current_session")
    await update.message.reply_text(LANGUAGES[lang]["session_saved"])

# Ajout des handlers
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("language", language))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("recap", recap))
app.add_handler(CommandHandler("save_session", save_session))

# Lancement du bot
if __name__ == "__main__":
    app.run_polling()
