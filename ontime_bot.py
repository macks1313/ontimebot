from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# Cr√©ez l'application avec votre cl√© Telegram
app = Application.builder().token("7685304448:AAEuMefo6gvKOydyTtRv6pVXLMxvTuJfWr4").build()

# Fonction utilitaire pour √©chapper les caract√®res sp√©ciaux pour MarkdownV2
def escape_markdown_v2(text):
    special_characters = r"_*[]()~`>#+-=|{}.!"
    for char in special_characters:
        text = text.replace(char, f"\\{char}")
    return text

# Dictionnaire des messages sarcastiques en plusieurs langues
LANGUAGES = {
    "fr": {
        "start_message": (
            "‚ú® Bonjour {name} !\n\n"
            "Je suis ton assistant bot ü§ñ, pr√™t √†‚Ä¶ enfin‚Ä¶ me d√©brouiller pour suivre tes horaires de travail, car apparemment tu ne peux pas le faire toi-m√™me. üòè\n\n"
            "Voici ce que je peux faire pour toi :\n"
            "/start - Me d√©marrer. Bravo, tu viens d√©j√† de le faire.\n"
            "/add - Ajouter des horaires (formats accept√©s : HH:MM, HHhMM, HhMM).\n"
            "/recap - Obtenir un magnifique r√©capitulatif de ton labeur √©pique.\n"
            "/delete - Supprimer toutes tes donn√©es, comme si je n‚Äôavais jamais exist√©. üôÉ\n"
            "/language - Changer ma langue (Anglais, Fran√ßais, Ukrainien).\n\n"
            "Maintenant, dis-moi, √¥ ma√Ætre, que puis-je faire pour toi aujourd'hui ? üòé"
        ),
        "add_success": (
            "‚ú® Tr√®s bien {name}, j'ai ajout√© √ßa √† ta session. Total d'heures travaill√©es : {hours:.2f} heures.\n\n"
            "Tu progresses, petit g√©nie. Continue comme √ßa. ü§ì"
        ),
        "invalid_format": "Euh‚Ä¶ pardon ? Ce format est incompr√©hensible. Essaie : HH:MM, HHhMM ou HhMM. üßê",
        "no_sessions": "Tu n'as enregistr√© aucune session. F√©licitations pour ton inactivit√©. üëè",
        "recap_header": "üìã Voici un r√©capitulatif de tes sessions de travail incroyablement inspirantes :\n",
        "data_deleted": "üöÆ Toutes tes donn√©es ont √©t√© supprim√©es. J'esp√®re que c'√©tait intentionnel. üôÑ",
    },
    "en": {
        "start_message": (
            "‚ú® Hello {name}!\n\n"
            "I'm your assistant bot ü§ñ, here to‚Ä¶ well‚Ä¶ try my best to track your working hours, since you clearly can't. üòè\n\n"
            "Here‚Äôs what I can do for you:\n"
            "/start - Start me. Congrats, you've already done it.\n"
            "/add - Add working hours (formats accepted: HH:MM, HHhMM, HhMM).\n"
            "/recap - Get a wonderful summary of your epic labor.\n"
            "/delete - Erase all your data, like I never existed. üôÉ\n"
            "/language - Change my language (English, French, Ukrainian).\n\n"
            "So, tell me, oh master, what can I do for you today? üòé"
        ),
        "add_success": (
            "‚ú® Alright {name}, I‚Äôve added that to your session. Total hours worked: {hours:.2f} hours.\n\n"
            "You're doing great, Einstein. Keep it up. ü§ì"
        ),
        "invalid_format": "Uh‚Ä¶ sorry? That format makes no sense. Try: HH:MM, HHhMM, or HhMM. üßê",
        "no_sessions": "You haven‚Äôt recorded any sessions. Congrats on your inactivity. üëè",
        "recap_header": "üìã Here‚Äôs a summary of your incredibly inspiring work sessions:\n",
        "data_deleted": "üöÆ All your data has been deleted. I hope that was intentional. üôÑ",
    },
    "uk": {
        "start_message": (
            "‚ú® –ü—Ä–∏–≤—ñ—Ç {name}!\n\n"
            "–Ø —Ç–≤—ñ–π –±–æ—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ç–≤–æ—ó –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏, –±–æ —Ç–∏ —Å–∞–º —Ü—å–æ–≥–æ –Ω–µ –º–æ–∂–µ—à, —Ç–∞–∫? üòè\n\n"
            "–û—Å—å —â–æ —è –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è —Ç–µ–±–µ:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–µ–Ω–µ. –í—ñ—Ç–∞—é, —Ç–∏ –≤–∂–µ —Ü–µ –∑—Ä–æ–±–∏–≤.\n"
            "/add - –î–æ–¥–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ (—Ñ–æ—Ä–º–∞—Ç–∏: HH:MM, HHhMM, HhMM).\n"
            "/recap - –û—Ç—Ä–∏–º–∞—Ç–∏ —á—É–¥–æ–≤–µ –∑–≤–µ–¥–µ–Ω–Ω—è —Ç–≤–æ—î—ó –µ–ø—ñ—á–Ω–æ—ó –ø—Ä–∞—Ü—ñ.\n"
            "/delete - –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–≤–æ—ó –¥–∞–Ω—ñ, –Ω—ñ–±–∏ –º–µ–Ω–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –±—É–ª–æ. üôÉ\n"
            "/language - –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É (–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞, –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞, –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞).\n\n"
            "–ù—É —â–æ, –∫–æ–º–∞–Ω–¥—É–π, –º—ñ–π –≥–æ—Å–ø–æ–¥–∞—Ä—é. –©–æ —è –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è —Ç–µ–±–µ —Å—å–æ–≥–æ–¥–Ω—ñ? üòé"
        ),
        "add_success": (
            "‚ú® –î–æ–±—Ä–µ, {name}, —è –¥–æ–¥–∞–≤ —Ü–µ –¥–æ —Ç–≤–æ—î—ó —Å–µ—Å—ñ—ó. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω: {hours:.2f} –≥–æ–¥.\n\n"
            "–ú–æ–ª–æ–¥–µ—Ü—å, –≥–µ–Ω—ñ—é. –ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ. ü§ì"
        ),
        "invalid_format": "–ï–º–º‚Ä¶ –≤–∏–±–∞—á—Ç–µ? –¶–µ–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ: HH:MM, HHhMM –∞–±–æ HhMM. üßê",
        "no_sessions": "–¢–∏ —â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–≤ –∂–æ–¥–Ω–æ—ó —Å–µ—Å—ñ—ó. –í—ñ—Ç–∞—é –∑ –±–µ–∑–¥—ñ—è–ª—å–Ω—ñ—Å—Ç—é. üëè",
        "recap_header": "üìã –û—Å—å –ø—ñ–¥—Å—É–º–æ–∫ —Ç–≤–æ—ó—Ö –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –Ω–∞–¥–∏—Ö–∞—é—á–∏—Ö —Ä–æ–±–æ—á–∏—Ö —Å–µ—Å—ñ–π:\n",
        "data_deleted": "üöÆ –í—Å—ñ —Ç–≤–æ—ó –¥–∞–Ω—ñ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ. –°–ø–æ–¥—ñ–≤–∞—é—Å—è, —Ü–µ –±—É–ª–æ –Ω–∞–≤–º–∏—Å–Ω–æ. üôÑ",
    },
}
from datetime import datetime

# Gestion des donn√©es utilisateur
user_data = {}

def get_language(user_id):
    return user_data.get(user_id, {}).get("language", "fr")

def calculate_hours(start, end):
    """Calcule les heures entre deux horaires."""
    start_time = datetime.strptime(start, "%H:%M")
    end_time = datetime.strptime(end, "%H:%M")
    duration = (end_time - start_time).seconds / 3600  # Convertir en heures
    return duration

def parse_time_format(time_str):
    """Convertit diff√©rents formats d'horaires en HH:MM."""
    if "h" in time_str:
        time_str = time_str.replace("h", ":")
    if len(time_str) == 4:  # Format HhMM
        time_str = f"0{time_str[:1]}:{time_str[1:]}"
    elif len(time_str) == 5 and time_str[2] != ":":  # Format HHhMM
        time_str = f"{time_str[:2]}:{time_str[3:]}"
    return time_str

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    first_name = update.message.from_user.first_name
    user_data[user_id] = {"sessions": [], "language": "fr", "total_hours": 0}
    lang = get_language(user_id)
    await update.message.reply_text(LANGUAGES[lang]["start_message"].format(name=first_name))

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    first_name = update.message.from_user.first_name
    lang = get_language(user_id)
    message = update.message.text

    if user_id not in user_data:
        user_data[user_id] = {"sessions": [], "language": "fr", "total_hours": 0}

    try:
        time_range = message.split(" ")[1]
        start, end = time_range.split("-")
        start = parse_time_format(start)
        end = parse_time_format(end)
        hours = calculate_hours(start, end)

        if "current_session" not in user_data[user_id]:
            user_data[user_id]["current_session"] = []

        user_data[user_id]["current_session"].append(f"{start}-{end}")
        user_data[user_id]["sessions"].append(user_data[user_id]["current_session"])
        user_data[user_id]["current_session"] = []
        user_data[user_id]["total_hours"] += hours

        await update.message.reply_text(
            LANGUAGES[lang]["add_success"].format(name=first_name, hours=user_data[user_id]["total_hours"])
        )
    except (ValueError, IndexError):
        await update.message.reply_text(LANGUAGES[lang]["invalid_format"])

async def recap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = get_language(user_id)

    if user_id not in user_data or "sessions" not in user_data[user_id] or not user_data[user_id]["sessions"]:
        await update.message.reply_text(LANGUAGES[lang]["no_sessions"])
        return

    recap_message = LANGUAGES[lang]["recap_header"]
    for idx, session in enumerate(user_data[user_id]["sessions"], start=1):
        recap_message += f"\n{idx}. {', '.join(session)}"

    await update.message.reply_text(recap_message)

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = get_language(user_id)

    if user_id in user_data:
        user_data.pop(user_id)

    await update.message.reply_text(LANGUAGES[lang]["data_deleted"])

# Ajout des handlers
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("recap", recap))
app.add_handler(CommandHandler("delete", delete))

# Lancement du bot
if __name__ == "__main__":
    app.run_polling()
