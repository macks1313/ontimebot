from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# Cr√©ez l'application avec votre cl√© Telegram
app = Application.builder().token("7685304448:AAEuMefo6gvKOydyTtRv6pVXLMxvTuJfWr4").build()

# Fonction utilitaire pour √©chapper les caract√®res sp√©ciaux pour MarkdownV2
def escape_markdown_v2(text):
    special_characters = r"_*[]()~`>#+-=|{}.!"
    for char in special_characters:
        text = text.replace(char, f"\\{char}")
    return text

# Dictionnaire des messages en plusieurs langues
LANGUAGES = {
    "fr": {
        "start_message": (
            "Bonjour {name} ! Je suis l√† pour vous aider √† suivre vos horaires de travail.\n\n"
            "Voici les commandes que je comprends :\n"
            "/start - Me d√©marrer.\n"
            "/help - Voir la liste des commandes.\n"
            "/language - Changer ma langue (Anglais, Fran√ßais, Ukrainien).\n"
            "/add - Ajouter des horaires de travail (formats accept√©s : HH:MM, HHhMM, HhMM).\n"
            "/recap - Obtenir un r√©sum√© de vos sessions enregistr√©es.\n"
            "/save_session - Enregistrer la session actuelle.\n\n"
            "Que puis-je faire pour vous aujourd'hui ? üòä"
        ),
        "add_success": "Tr√®s bien {name}, j'ai ajout√© √ßa √† votre session. Heures totales travaill√©es : {hours:.2f} heures.",
        "invalid_format": "Je n'ai pas compris le format. Essayez l'un des formats suivants : HH:MM, HHhMM ou HhMM.",
        "no_sessions": "Vous n'avez enregistr√© aucune session pour l'instant.",
        "recap_header": "Voici un r√©capitulatif de vos sessions :",
        "session_saved": "Session actuelle sauvegard√©e avec succ√®s.",
        "no_active_session": "Aucune session active √† sauvegarder.",
    },
    "en": {
        "start_message": (
            "Hello {name}! I'm here to help you track your working hours.\n\n"
            "Here are the commands I understand:\n"
            "/start - Start me.\n"
            "/help - See the list of commands.\n"
            "/language - Change my language (English, French, Ukrainian).\n"
            "/add - Add working hours (formats accepted: HH:MM, HHhMM, HhMM).\n"
            "/recap - Get a summary of your saved sessions.\n"
            "/save_session - Save the current session.\n\n"
            "How can I assist you today? üòä"
        ),
        "add_success": "Alright {name}, I've added that to your session. Total hours worked: {hours:.2f} hours.",
        "invalid_format": "I couldn't understand the format. Try one of the following formats: HH:MM, HHhMM, or HhMM.",
        "no_sessions": "You have no recorded sessions yet.",
        "recap_header": "Here is a summary of your sessions:",
        "session_saved": "Current session successfully saved.",
        "no_active_session": "No active session to save.",
    },
    "uk": {
        "start_message": (
            "–ü—Ä–∏–≤—ñ—Ç {name}! –Ø —Ç—É—Ç, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏.\n\n"
            "–û—Å—å –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ —è —Ä–æ–∑—É–º—ñ—é:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–µ–Ω–µ.\n"
            "/help - –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
            "/language - –ó–º—ñ–Ω–∏—Ç–∏ –º–æ—é –º–æ–≤—É (–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞, –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞, –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞).\n"
            "/add - –î–æ–¥–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ (—Ñ–æ—Ä–º–∞—Ç–∏: HH:MM, HHhMM, HhMM).\n"
            "/recap - –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤–µ–¥–µ–Ω–Ω—è –≤–∞—à–∏—Ö —Å–µ—Å—ñ–π.\n"
            "/save_session - –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é.\n\n"
            "–ß–∏–º —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ? üòä"
        ),
        "add_success": "–ì–∞—Ä–∞–∑–¥ {name}, —è –¥–æ–¥–∞–≤ —Ü–µ –¥–æ –≤–∞—à–æ—ó —Å–µ—Å—ñ—ó. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω: {hours:.2f} –≥–æ–¥.",
        "invalid_format": "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–∏–Ω —ñ–∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤: HH:MM, HHhMM –∞–±–æ HhMM.",
        "no_sessions": "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–µ—Å—ñ–π.",
        "recap_header": "–û—Å—å –∑–≤–µ–¥–µ–Ω–Ω—è –≤–∞—à–∏—Ö —Å–µ—Å—ñ–π:",
        "session_saved": "–ü–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "no_active_session": "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.",
    },
}
from datetime import datetime

# Fonction pour obtenir la langue d'un utilisateur
user_data = {}

def get_language(user_id):
    return user_data.get(user_id, {}).get("language", "fr")

def calculate_hours(start, end):
    """Calcule les heures entre deux horaires."""
    start_time = datetime.strptime(start, "%H:%M")
    end_time = datetime.strptime(end, "%H:%M")
    duration = (end_time - start_time).seconds / 3600  # Convertir en heures
    return duration

def parse_time_format(time_str):
    """Convertit diff√©rents formats d'horaires en HH:MM."""
    if "h" in time_str:
        time_str = time_str.replace("h", ":")
    if len(time_str) == 4:  # Format HhMM
        time_str = f"0{time_str[:1]}:{time_str[1:]}"
    elif len(time_str) == 5 and time_str[2] != ":":  # Format HHhMM
        time_str = f"{time_str[:2]}:{time_str[3:]}"
    return time_str

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    first_name = update.message.from_user.first_name
    user_data[user_id] = {"sessions": [], "language": "fr", "total_hours": 0}
    lang = get_language(user_id)
    await update.message.reply_text(LANGUAGES[lang]["start_message"].format(name=first_name))

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    first_name = update.message.from_user.first_name
    lang = get_language(user_id)
    message = update.message.text

    if user_id not in user_data:
        user_data[user_id] = {"sessions": [], "language": "fr", "total_hours": 0}

    # Extraire l'horaire
    try:
        time_range = message.split(" ")[1]
        start, end = time_range.split("-")
        start = parse_time_format(start)
        end = parse_time_format(end)
        hours = calculate_hours(start, end)

        if "current_session" not in user_data[user_id]:
            user_data[user_id]["current_session"] = []

        user_data[user_id]["current_session"].append(f"{start}-{end}")
        user_data[user_id]["total_hours"] += hours

        await update.message.reply_text(
            LANGUAGES[lang]["add_success"].format(name=first_name, hours=user_data[user_id]["total_hours"])
        )
    except (ValueError, IndexError):
        await update.message.reply_text(LANGUAGES[lang]["invalid_format"])

async def recap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = get_language(user_id)

    if user_id not in user_data or "sessions" not in user_data[user_id] or not user_data[user_id]["sessions"]:
        await update.message.reply_text(LANGUAGES[lang]["no_sessions"])
        return

    recap_message = LANGUAGES[lang]["recap_header"]
    for idx, session in enumerate(user_data[user_id]["sessions"], start=1):
        recap_message += f"\n{idx}. {', '.join(session)}"

    await update.message.reply_text(recap_message)

# Ajout des handlers
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("recap", recap))

# Lancement du bot
if __name__ == "__main__":
    app.run_polling()

