from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# Cr√©ez l'application avec votre cl√© Telegram
app = Application.builder().token("7685304448:AAEuMefo6gvKOydyTtRv6pVXLMxvTuJfWr4").build()

# Fonction utilitaire pour √©chapper les caract√®res sp√©ciaux pour MarkdownV2
def escape_markdown_v2(text):
    special_characters = r"_*[]()~`>#+-=|{}.!"
    for char in special_characters:
        text = text.replace(char, f"\\{char}")
    return text

# Dictionnaire des messages en plusieurs langues
LANGUAGES = {
    "en": {
        "start_message": (
            "Hello! I'm your sarcastic assistant bot.\n\n"
            "Here are the commands I understand:\n"
            "/start - Starts me, of course.\n"
            "/help - Shows this fabulous list of commands.\n"
            "/language - Change my language (English, French, Ukrainian).\n"
            "/add - Add working hours (format: HH:MM-HH:MM).\n"
            "/recap - Get a summary of your saved sessions.\n"
            "/save_session - Save the current session.\n\n"
            "What do you want now? ü§î"
        ),
        "add_success": "Fine, I've added that to your session. Total hours worked so far: {hours:.2f} hours.",
        "invalid_format": "I couldn't understand the time format. Please use HH:MM-HH:MM.",
    },
    "fr": {
        "start_message": (
            "Bonjour ! Je suis votre assistant sarcastique.\n\n"
            "Voici les commandes que je comprends :\n"
            "/start - Me d√©marrer, bien s√ªr.\n"
            "/help - Montre cette liste fabuleuse de commandes.\n"
            "/language - Change ma langue (Anglais, Fran√ßais, Ukrainien).\n"
            "/add - Ajouter des horaires de travail (format : HH:MM-HH:MM).\n"
            "/recap - Obtenir un r√©sum√© de vos sessions enregistr√©es.\n"
            "/save_session - Enregistrer la session actuelle.\n\n"
            "Et maintenant, qu'est-ce que tu veux ? ü§î"
        ),
        "add_success": "Tr√®s bien, j'ai ajout√© √ßa √† votre session. Heures totales travaill√©es : {hours:.2f} heures.",
        "invalid_format": "Je n'ai pas compris le format. Utilisez HH:MM-HH:MM.",
    },
    "uk": {
        "start_message": (
            "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –±–æ—Ç.\n\n"
            "–û—Å—å –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ —è —Ä–æ–∑—É–º—ñ—é:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–µ–Ω–µ, –∑–≤—ñ—Å–Ω–æ.\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
            "/language - –ó–º—ñ–Ω–∏—Ç–∏ –º–æ—é –º–æ–≤—É (–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞, –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞, –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞).\n"
            "/add - –î–æ–¥–∞—Ç–∏ –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ (—Ñ–æ—Ä–º–∞—Ç: HH:MM-HH:MM).\n"
            "/recap - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—é–º–µ –≤–∞—à–∏—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–µ—Å—ñ–π.\n"
            "/save_session - –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é.\n\n"
            "–Ü —â–æ —Ç–µ–ø–µ—Ä? ü§î"
        ),
        "add_success": "–î–æ–±—Ä–µ, —è –¥–æ–¥–∞–≤ —Ü–µ –¥–æ –≤–∞—à–æ—ó —Å–µ—Å—ñ—ó. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω: {hours:.2f} –≥–æ–¥.",
        "invalid_format": "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HH:MM-HH:MM.",
    },
}
from datetime import datetime

# Fonction pour obtenir la langue d'un utilisateur
user_data = {}

def get_language(user_id):
    return user_data.get(user_id, {}).get("language", "en")

def calculate_hours(start, end):
    """Calcule les heures entre deux horaires."""
    start_time = datetime.strptime(start, "%H:%M")
    end_time = datetime.strptime(end, "%H:%M")
    duration = (end_time - start_time).seconds / 3600  # Convertir en heures
    return duration

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data[user_id] = {"sessions": [], "language": "en", "total_hours": 0}
    lang = get_language(user_id)
    await update.message.reply_text(LANGUAGES[lang]["start_message"])

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = get_language(user_id)
    message = update.message.text

    if user_id not in user_data:
        user_data[user_id] = {"sessions": [], "language": "en", "total_hours": 0}

    # Extraire l'horaire
    try:
        time_range = message.split(" ")[1]
        start, end = time_range.split("-")
        hours = calculate_hours(start, end)

        if "current_session" not in user_data[user_id]:
            user_data[user_id]["current_session"] = []

        user_data[user_id]["current_session"].append(f"{start}-{end}")
        user_data[user_id]["total_hours"] += hours

        await update.message.reply_text(
            LANGUAGES[lang]["add_success"].format(hours=user_data[user_id]["total_hours"])
        )
    except (ValueError, IndexError):
        await update.message.reply_text(LANGUAGES[lang]["invalid_format"])

async def recap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = get_language(user_id)

    if user_id not in user_data or "sessions" not in user_data[user_id] or not user_data[user_id]["sessions"]:
        await update.message.reply_text("No sessions recorded.")
        return

    recap_message = "Here is your recap:\n"
    for session in user_data[user_id]["sessions"]:
        recap_message += f"- {session}\n"

    await update.message.reply_text(recap_message)

# Ajout des handlers
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("recap", recap))

# Lancement du bot
if __name__ == "__main__":
    app.run_polling()

